#!/usr/bin/env python3
"""
Create Interactive Globe Overlay for GeoAnomalyMapper Results

Generates:
1. KML file for Google Earth viewing
2. HTML/Cesium.js interactive web globe
"""

import logging
import sys
from pathlib import Path
import numpy as np
import rasterio
from rasterio.warp import calculate_default_transform, reproject, Resampling
import matplotlib.pyplot as plt
import matplotlib.colors as mcolors
import simplekml

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler(sys.stdout)]
)
logger = logging.getLogger(__name__)


def create_kml_overlay(geotiff_path: str, output_dir: Path):
    """Create a KML file with ground overlay for Google Earth."""
    logger.info("Creating KML overlay for Google Earth...")
    
    # Open the GeoTIFF with rasterio
    with rasterio.open(geotiff_path) as src:
        data = src.read(1, masked=True)
        bounds = src.bounds
        
    minx, miny, maxx, maxy = bounds.left, bounds.bottom, bounds.right, bounds.top
    logger.info(f"Bounds: ({minx}, {miny}) to ({maxx}, {maxy})")
    
    # Create a PNG overlay with color mapping
    png_path = output_dir / 'fused_anomaly_overlay.png'
    
    logger.info("Generating color-mapped PNG overlay...")
    
    # Create a colormap (blue for negative, red for positive anomalies)
    cmap = plt.cm.RdYlBu_r  # Red-Yellow-Blue reversed
    norm = mcolors.TwoSlopeNorm(vmin=-6, vcenter=0, vmax=3.5)
    
    # Apply colormap to data
    colored_data = cmap(norm(data.filled(np.nan)))
    
    # Set transparency for near-zero values
    alpha = np.ones_like(data.data, dtype=float)
    # Make near-zero values more transparent
    near_zero_mask = np.abs(data.data) < 0.5
    alpha[near_zero_mask] = 0.3
    alpha[data.mask] = 0  # Fully transparent for nodata
    
    colored_data[:, :, 3] = alpha  # Set alpha channel
    
    # Save as PNG
    fig = plt.figure(figsize=(data.shape[1]/100, data.shape[0]/100), dpi=100)
    ax = fig.add_axes([0, 0, 1, 1])
    ax.axis('off')
    ax.imshow(colored_data, origin='upper')
    plt.savefig(png_path, dpi=100, bbox_inches='tight', pad_inches=0, transparent=True)
    plt.close()
    
    logger.info(f"Generated PNG overlay: {png_path}")
    
    # Create KML
    kml = simplekml.Kml()
    kml.document.name = "GeoAnomalyMapper Global Fused Anomalies"
    
    # Add description
    kml.document.description = """
    Global geophysical anomaly map combining magnetic and gravity data.
    
    Color Scale:
    - Dark Blue: Strong negative anomalies (-6σ to -3σ)
    - Light Blue: Moderate negative anomalies (-3σ to -1σ)
    - White/Transparent: Near-zero anomalies (-1σ to +1σ)
    - Yellow: Moderate positive anomalies (+1σ to +2σ)
    - Red: Strong positive anomalies (+2σ to +3.5σ)
    
    Generated by GeoAnomalyMapper
    """
    
    # Add ground overlay
    ground = kml.newgroundoverlay(name='Fused Anomaly Map')
    ground.icon.href = png_path.name  # Relative path
    ground.latlonbox.north = maxy
    ground.latlonbox.south = miny
    ground.latlonbox.east = maxx
    ground.latlonbox.west = minx
    ground.latlonbox.rotation = 0
    
    # Set transparency
    ground.color = simplekml.Color.changealphaint(128, simplekml.Color.white)
    
    # Add some reference placemarks for known features
    folder = kml.newfolder(name='Reference Sites')
    
    reference_sites = [
        ('Carlsbad Caverns, NM', -104.4, 32.4, 'Known cave system'),
        ('Vredefort Dome, South Africa', 27.0, -27.0, 'Impact crater structure'),
        ('Rio Tinto, Spain', -6.6, 37.4, 'Mining district'),
        ('Dead Sea Rift', 35.5, 30.0, 'Tectonic feature'),
        ('Grand Canyon, AZ', -112.0, 36.0, 'Geological formation'),
        ('Mount Fuji, Japan', 139.7, 35.7, 'Volcano'),
        ('Kilauea, Hawaii', -155.3, 19.4, 'Active volcano'),
        ('Chicxulub Crater, Mexico', -89.5, 21.3, 'Impact crater'),
        ('Sudbury Basin, Canada', -81.1, 46.6, 'Impact crater/mining'),
    ]
    
    for name, lon, lat, desc in reference_sites:
        pnt = folder.newpoint(name=name, coords=[(lon, lat)])
        pnt.description = desc
        pnt.style.iconstyle.icon.href = 'http://maps.google.com/mapfiles/kml/pushpin/ylw-pushpin.png'
        pnt.style.iconstyle.scale = 0.8
    
    # Save KML
    kml_path = output_dir / 'fused_anomaly_google_earth.kml'
    kml.save(str(kml_path))
    logger.info(f"Saved KML file: {kml_path}")
    
    # Create KMZ (zipped KML with overlay image)
    kmz_path = output_dir / 'fused_anomaly_google_earth.kmz'
    kml.savekmz(str(kmz_path), [str(png_path)])
    logger.info(f"Saved KMZ file: {kmz_path}")
    
    return kml_path, kmz_path


def create_cesium_viewer(geotiff_path: str, output_dir: Path):
    """Create an HTML/Cesium.js interactive globe viewer."""
    logger.info("Creating Cesium.js web globe viewer...")
    
    html_content = """<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>GeoAnomalyMapper - Interactive Globe</title>
    <script src="https://cesium.com/downloads/cesiumjs/releases/1.109/Build/Cesium/Cesium.js"></script>
    <link href="https://cesium.com/downloads/cesiumjs/releases/1.109/Build/Cesium/Widgets/widgets.css" rel="stylesheet">
    <style>
        html, body, #cesiumContainer {
            width: 100%;
            height: 100%;
            margin: 0;
            padding: 0;
            overflow: hidden;
            font-family: Arial, sans-serif;
        }
        #info-panel {
            position: absolute;
            top: 10px;
            left: 10px;
            background: rgba(255, 255, 255, 0.9);
            padding: 15px;
            border-radius: 8px;
            max-width: 300px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.3);
            z-index: 1000;
        }
        #info-panel h2 {
            margin: 0 0 10px 0;
            font-size: 18px;
            color: #333;
        }
        #info-panel p {
            margin: 5px 0;
            font-size: 14px;
            color: #666;
        }
        .legend {
            margin-top: 10px;
            padding-top: 10px;
            border-top: 1px solid #ddd;
        }
        .legend-item {
            display: flex;
            align-items: center;
            margin: 3px 0;
        }
        .legend-color {
            width: 30px;
            height: 15px;
            margin-right: 8px;
            border: 1px solid #999;
        }
    </style>
</head>
<body>
    <div id="info-panel">
        <h2>GeoAnomalyMapper</h2>
        <p><strong>Global Anomaly Map</strong></p>
        <p style="font-size: 12px;">Fused magnetic + gravity anomalies</p>
        <div class="legend">
            <div class="legend-item">
                <div class="legend-color" style="background: rgb(0,0,139);"></div>
                <span style="font-size: 12px;">Strong negative (-6σ)</span>
            </div>
            <div class="legend-item">
                <div class="legend-color" style="background: rgb(135,206,250);"></div>
                <span style="font-size: 12px;">Moderate negative</span>
            </div>
            <div class="legend-item">
                <div class="legend-color" style="background: rgba(255,255,255,0.5);"></div>
                <span style="font-size: 12px;">Near zero</span>
            </div>
            <div class="legend-item">
                <div class="legend-color" style="background: rgb(255,255,0);"></div>
                <span style="font-size: 12px;">Moderate positive</span>
            </div>
            <div class="legend-item">
                <div class="legend-color" style="background: rgb(255,0,0);"></div>
                <span style="font-size: 12px;">Strong positive (+3.5σ)</span>
            </div>
        </div>
        <p style="font-size: 11px; margin-top: 10px; color: #888;">
            Use mouse to rotate, zoom. Click sites for info.
        </p>
    </div>
    <div id="cesiumContainer"></div>
    
    <script>
        // Initialize Cesium Viewer
        Cesium.Ion.defaultAccessToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiJlYWE1OWUxNy1mMWZiLTQzYjYtYTQ0OS1kMWFjYmFkNjc5YzciLCJpZCI6NTc3MzMsImlhdCI6MTYyNzg0NTE4Mn0.XcKpgANiY19MC4bdFUXMVEBToBmqS8kuYpUlxJHYZxk';
        
        const viewer = new Cesium.Viewer('cesiumContainer', {
            terrainProvider: Cesium.createWorldTerrain(),
            baseLayerPicker: true,
            geocoder: true,
            homeButton: true,
            sceneModePicker: true,
            navigationHelpButton: true,
            animation: false,
            timeline: false,
        });
        
        // Add the anomaly overlay as an ImageryLayer
        const imageryProvider = new Cesium.SingleTileImageryProvider({
            url: 'fused_anomaly_overlay.png',
            rectangle: Cesium.Rectangle.fromDegrees(-180, -90, 180, 90)
        });
        
        viewer.imageryLayers.addImageryProvider(imageryProvider);
        
        // Add reference sites
        const referenceSites = [
            {name: 'Carlsbad Caverns, NM', lon: -104.4, lat: 32.4, desc: 'Known cave system'},
            {name: 'Vredefort Dome, South Africa', lon: 27.0, lat: -27.0, desc: 'Impact crater'},
            {name: 'Rio Tinto, Spain', lon: -6.6, lat: 37.4, desc: 'Mining district'},
            {name: 'Dead Sea Rift', lon: 35.5, lat: 30.0, desc: 'Tectonic feature'},
            {name: 'Grand Canyon, AZ', lon: -112.0, lat: 36.0, desc: 'Geological formation'},
            {name: 'Mount Fuji, Japan', lon: 139.7, lat: 35.7, desc: 'Volcano'},
            {name: 'Kilauea, Hawaii', lon: -155.3, lat: 19.4, desc: 'Active volcano'},
            {name: 'Chicxulub Crater, Mexico', lon: -89.5, lat: 21.3, desc: 'Impact crater'},
        ];
        
        referenceSites.forEach(site => {
            viewer.entities.add({
                position: Cesium.Cartesian3.fromDegrees(site.lon, site.lat),
                point: {
                    pixelSize: 10,
                    color: Cesium.Color.YELLOW,
                    outlineColor: Cesium.Color.BLACK,
                    outlineWidth: 2
                },
                label: {
                    text: site.name,
                    font: '12px sans-serif',
                    fillColor: Cesium.Color.WHITE,
                    outlineColor: Cesium.Color.BLACK,
                    outlineWidth: 2,
                    style: Cesium.LabelStyle.FILL_AND_OUTLINE,
                    verticalOrigin: Cesium.VerticalOrigin.BOTTOM,
                    pixelOffset: new Cesium.Cartesian2(0, -10)
                },
                description: site.desc
            });
        });
        
        // Set initial camera view
        viewer.camera.setView({
            destination: Cesium.Cartesian3.fromDegrees(0, 0, 20000000)
        });
    </script>
</body>
</html>"""
    
    html_path = output_dir / 'globe_viewer.html'
    with open(html_path, 'w', encoding='utf-8') as f:
        f.write(html_content)
    
    logger.info(f"Saved Cesium viewer: {html_path}")
    return html_path


def main():
    """Main function to create globe overlays."""
    # Paths
    script_dir = Path(__file__).parent
    project_root = script_dir.parent
    geotiff_path = project_root / 'data' / 'outputs' / 'final' / 'fused_anomaly.tif'
    output_dir = project_root / 'data' / 'outputs' / 'final'
    
    if not geotiff_path.exists():
        logger.error(f"Fused anomaly file not found: {geotiff_path}")
        sys.exit(1)
    
    # Create KML/KMZ for Google Earth
    kml_path, kmz_path = create_kml_overlay(str(geotiff_path), output_dir)
    
    # Create Cesium web viewer
    html_path = create_cesium_viewer(str(geotiff_path), output_dir)
    
    print("\n" + "="*70)
    print("INTERACTIVE GLOBE VIEWERS CREATED")
    print("="*70)
    print("\nOption 1: Google Earth (Recommended)")
    print(f"  File: {kmz_path}")
    print("  Usage: Double-click the KMZ file to open in Google Earth")
    print("         (Install Google Earth if needed: https://earth.google.com)")
    
    print("\nOption 2: Web Browser Globe")
    print(f"  File: {html_path}")
    print("  Usage: Open the HTML file in a web browser")
    print("         Requires internet connection for Cesium.js")
    
    print("\nBoth viewers include:")
    print("  - Color-coded anomaly overlay")
    print("  - Reference geological sites marked")
    print("  - Interactive pan, zoom, rotate")
    print("="*70 + "\n")


if __name__ == '__main__':
    main()