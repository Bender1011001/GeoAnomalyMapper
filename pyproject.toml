[project]
name = "geoanomalymapper"
version = "0.1.0"
description = "Geophysical data fusion for subsurface anomaly detection."
readme = "README.md"
authors = [{name = "GeoAnomalyMapper Team", email = "team@example.com"}]
requires-python = ">=3.10,<3.13"
license = {text = "MIT"}
keywords = ["geophysics", "anomaly detection", "inversion", "data fusion", "seismic", "gravity", "InSAR", "GIS", "subsurface", "earth science"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Environment :: Console",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Typing :: Typed",
    "Natural Language :: English",
    "Topic :: Scientific/Engineering :: GIS",
    "Topic :: Scientific/Engineering :: Physics",
    "Topic :: Scientific/Engineering :: Geoscience",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Framework :: Matplotlib",
    "Framework :: Jupyter",
]
dependencies = [
    "numpy==1.26.4",
    "scipy==1.11.4",
    "pandas==2.1.4",
    "scikit-learn==1.3.2",
    "matplotlib==3.7.2",
    "seaborn==0.12.2",
    "plotly==5.17.0",
    "geopandas==0.14.0",
    "rasterio==1.3.8",
    "shapely==2.0.1",
    "pyproj==3.6.1",
    "fiona==1.9.5",
    "xarray==2023.8.1",
    "netcdf4==1.6.3",
    "requests==2.31.1",
    "pydantic==2.4.2",
    "click==8.1.7",
    "tqdm==4.66.3",
    "joblib==1.3.2",
    "pillow==10.0.1",
    "imageio==2.31.1",
    "h5py==3.9.3",
    "tables==3.8.1",
    "pyyaml==6.0.2",
    "tenacity==8.2.3",
    "dask[complete]==2024.8.1",
    "sqlalchemy==1.4.52",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "coverage>=7.6.0",
    "black>=23.9.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.6.0",
    "pre-commit>=3.5.0",
    "sphinx>=7.4.0",
    "jupyter>=1.0.0",
    "ipykernel>=6.25.0",
    "notebook>=7.0.0",
    "psutil>=6.0.0",
    "pip-tools>=7.0.0",
]
api = [
    "fastapi>=0.104.0",
    "uvicorn>=0.24.0",
]
dashboard = [
    "streamlit>=1.38.0",
    "streamlit-folium>=0.17.0",
    "itkwidgets>=0.13.0",
    "pyvistaqt>=0.11.0",
    "stpyvista>=0.1.0",
    "pygmt>=0.12.0",
    "pyvista>=0.44.0",
    "folium>=0.15.0",
    "vtk>=9.3.0",
]
geophysics = [
    "simpeg>=0.21.0",
    "obspy>=1.4.0",
    "mintpy>=1.6.0",
    "pygimli>=1.5.0",
    "sentinelsat>=1.0.0",
]
visualization = [
    "pygmt>=0.12.0",
    "pyvista>=0.44.0",
    "folium>=0.15.0",
    "vtk>=9.3.0",
]
all = [
    "fastapi>=0.104.0",
    "uvicorn>=0.24.0",
    "streamlit>=1.38.0",
    "streamlit-folium>=0.17.0",
    "itkwidgets>=0.13.0",
    "pyvistaqt>=0.11.0",
    "stpyvista>=0.1.0",
    "pygmt>=0.12.0",
    "pyvista>=0.44.0",
    "folium>=0.15.0",
    "vtk>=9.3.0",
    "simpeg>=0.21.0",
    "obspy>=1.4.0",
    "mintpy>=1.6.0",
    "pygimli>=1.5.0",
    "sentinelsat>=1.0.0",
]

[project.scripts]
gam = "gam.core.cli:cli"

[project.urls]
Homepage = "https://github.com/GeoAnomalyMapper/GAM"
Documentation = "https://geoanomalymapper.readthedocs.io"
Repository = "https://github.com/GeoAnomalyMapper/GAM"
Issues = "https://github.com/GeoAnomalyMapper/GAM/issues"

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["gam"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = "-v --tb=short --strict-markers"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["gam"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]