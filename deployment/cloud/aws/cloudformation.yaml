AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS CloudFormation template for GeoAnomalyMapper (GAM) deployment. Deploys scalable compute, storage, and networking for geophysical data processing.'

Parameters:
  Environment:
    Type: String
    Default: 'production'
    Description: 'Deployment environment (dev/prod)'
    AllowedValues: ['dev', 'prod']
  InstanceType:
    Type: String
    Default: 't3.medium'
    Description: 'EC2 instance type for GAM processing'
    AllowedValues: ['t3.micro', 't3.small', 't3.medium', 'm5.large', 'm5.xlarge']
  MinInstances:
    Type: Number
    Default: 1
    Description: 'Minimum number of EC2 instances in ASG'
    MinValue: 0
    MaxValue: 10
  MaxInstances:
    Type: Number
    Default: 5
    Description: 'Maximum number of EC2 instances in ASG'
    MinValue: 1
    MaxValue: 20
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: 'EC2 Key Pair for SSH access'
  VpcCidr:
    Type: String
    Default: '10.0.0.0/16'
    Description: 'CIDR block for VPC'
  SubnetCidr1:
    Type: String
    Default: '10.0.1.0/24'
    Description: 'CIDR for public subnet 1'
  SubnetCidr2:
    Type: String
    Default: '10.0.2.0/24'
    Description: 'CIDR for public subnet 2'
  DBSubnetCidr1:
    Type: String
    Default: '10.0.3.0/24'
    Description: 'CIDR for private subnet 1 (DB)'
  DBSubnetCidr2:
    Type: String
    Default: '10.0.4.0/24'
    Description: 'CIDR for private subnet 2 (DB)'

Resources:
  # VPC and Networking
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-gam-vpc'

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-gam-igw'

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref SubnetCidr1
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-public-subnet-1'

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref SubnetCidr2
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-public-subnet-2'

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref DBSubnetCidr1
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-private-subnet-1'

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref DBSubnetCidr2
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-private-subnet-2'

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-public-rt'

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # Security Groups
  GAMSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Security group for GAM EC2 instances'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: '0.0.0.0/0'  # Restrict to bastion/VPN in prod
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          CidrIp: '0.0.0.0/0'  # For potential API access
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-gam-sg'

  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Security group for GAM database'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref GAMSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-db-sg'

  # S3 Buckets for Data Storage
  InputDataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'gam-${Environment}-input-data-${AWS::AccountId}-${AWS::Region}'
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Name
          Value: 'GAM Input Data'
        - Key: Environment
          Value: !Ref Environment

  OutputDataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'gam-${Environment}-output-data-${AWS::AccountId}-${AWS::Region}'
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Name
          Value: 'GAM Output Data'
        - Key: Environment
          Value: !Ref Environment

  # IAM Roles
  GAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess  # Restrict to specific buckets in prod
      Policies:
        - PolicyName: GAMPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                Resource:
                  - !GetAtt InputDataBucket.Arn
                  - !GetAtt OutputDataBucket.Arn
                  - !Sub '${InputDataBucket.Arn}/*'
                  - !Sub '${OutputDataBucket.Arn}/*'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
      Tags:
        - Key: Environment
          Value: !Ref Environment

  GAMInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref GAMRole

  # EC2 Launch Template
  GAMLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub '${Environment}-gam-launch-template'
      LaunchTemplateData:
        ImageId: ami-0c02fb55956c7d316  # Amazon Linux 2023 AMI (update to latest)
        InstanceType: !Ref InstanceType
        KeyName: !Ref KeyName
        IamInstanceProfile:
          Arn: !Ref GAMInstanceProfile
        SecurityGroupIds:
          - !Ref GAMSecurityGroup
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            yum update -y
            yum install -y docker
            systemctl start docker
            systemctl enable docker
            usermod -a -G docker ec2-user
            # Pull GAM Docker image (assume pushed to ECR)
            aws ecr get-login-password --region ${AWS::Region} | docker login --username AWS --password-stdin ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com
            docker pull ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/gam:latest
            # Run GAM in container (example: process data from S3)
            docker run --rm \
              -v /tmp:/app/data \
              -e AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} \
              -e AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY} \
              ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/gam:latest \
              gam run --config /app/config/production.yaml --input-s3 ${InputDataBucket} --output-s3 ${OutputDataBucket}
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              VolumeSize: 30
              VolumeType: gp3
              DeleteOnTermination: true

  # Auto Scaling Group
  GAMASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Join [',', [!Ref PublicSubnet1, !Ref PublicSubnet2]]
      LaunchTemplate:
        LaunchTemplateId: !Ref GAMLaunchTemplate
        Version: !GetAtt GAMLaunchTemplate.LatestVersionNumber
      MinSize: !Ref MinInstances
      MaxSize: !Ref MaxInstances
      DesiredCapacity: !Ref MinInstances
      HealthCheckType: ELB
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-gam-asg'
          PropagateAtLaunch: true
        - Key: Environment
          Value: !Ref Environment
          PropagateAtLaunch: true

  # Load Balancer (for future API scaling)
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub '${Environment}-gam-alb'
      Subnets: [!Ref PublicSubnet1, !Ref PublicSubnet2]
      SecurityGroups: [!Ref GAMSecurityGroup]
      Scheme: internet-facing
      Type: application

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${Environment}-gam-tg'
      Port: 8000
      Protocol: HTTP
      VpcId: !Ref VPC
      HealthCheckPath: /health
      HealthCheckIntervalSeconds: 30
      HealthyThresholdCount: 2
      TargetType: instance

  ALBASGAttachment:
    Type: AWS::AutoScaling::Attachment
    Properties:
      AutoScalingGroupName: !Ref GAMASG
      AttachmentId: !Ref ALBTargetGroup

  # Optional: RDS for PostgreSQL caching (if GAM uses SQLAlchemy for metadata)
  GAMDB:
    Type: AWS::RDS::DBInstance
    Condition: UseDatabase
    Properties:
      DBInstanceIdentifier: !Sub '${Environment}-gam-db'
      DBInstanceClass: db.t3.micro
      Engine: postgres
      EngineVersion: '14.7'
      MasterUsername: gamadmin
      MasterUserPassword: !Ref 'DBPassword'  # Use Secrets Manager in prod
      AllocatedStorage: 20
      StorageType: gp2
      VPCSecurityGroups: [!Ref DBSecurityGroup]
      DBSubnetGroupName: !Ref DBSubnetGroup
      BackupRetentionPeriod: 7
      MultiAZ: !If [UseDatabase, true, false]
      PubliclyAccessible: false
      Tags:
        - Key: Environment
          Value: !Ref Environment

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Condition: UseDatabase
    Properties:
      DBSubnetGroupDescription: 'Subnets for GAM DB'
      SubnetIds: [!Ref PrivateSubnet1, !Ref PrivateSubnet2]
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-db-subnet-group'

Conditions:
  UseDatabase: !Equals [!Ref Environment, 'prod']

Outputs:
  InputBucketName:
    Description: 'S3 bucket for input data'
    Value: !Ref InputDataBucket
    Export:
      Name: !Sub '${Environment}-gam-input-bucket'

  OutputBucketName:
    Description: 'S3 bucket for output data'
    Value: !Ref OutputDataBucket
    Export:
      Name: !Sub '${Environment}-gam-output-bucket'

  ASGName:
    Description: 'Auto Scaling Group name'
    Value: !Ref GAMASG
    Export:
      Name: !Sub '${Environment}-gam-asg'

  ALBDNS:
    Description: 'Load Balancer DNS name'
    Value: !GetAtt ALB.DNSName
    Export:
      Name: !Sub '${Environment}-gam-alb-dns'