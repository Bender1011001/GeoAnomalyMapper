# syntax=docker/dockerfile:1.7

# Use a stable Debian base with Python matching pyproject.toml (python = ^3.10)
FROM python:3.10-slim-bookworm AS base

ENV DEBIAN_FRONTEND=noninteractive \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    VIRTUAL_ENV=/opt/venv \
    PATH="/opt/venv/bin:${PATH}"

# Common packages useful in all stages
RUN apt-get update && apt-get install -y --no-install-recommends \
    ca-certificates curl git pkg-config \
  && rm -rf /var/lib/apt/lists/*

# Prepare a venv that downstream stages will use
RUN python -m venv "${VIRTUAL_ENV}" && \
    pip install --no-cache-dir --upgrade pip setuptools wheel

# ---------- Builder target: has -dev libs and toolchain ----------
FROM base AS base-builder
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    libgdal-dev \
    libgeos-dev \
    libproj-dev \
    libspatialindex-dev \
    libnetcdf-dev \
    libhdf5-dev \
    libpq-dev \
    libssl-dev \
    libffi-dev \
  && rm -rf /var/lib/apt/lists/*

WORKDIR /app
# Nothing is copied here; service Dockerfiles will COPY only manifests first to maximize caching

# ---------- Runtime target: headless geospatial runtime ----------
FROM base AS base-runtime
# Bookworm runtime libs compatible with the builder dev packages above
RUN apt-get update && apt-get install -y --no-install-recommends \
    gdal-bin \
    libgdal31 \
    libgeos-c1v5 \
    libproj19 \
    libspatialindex6v5 \
    libnetcdf19 \
    libhdf5-103 \
    libpq5 \
    libssl3 \
    libffi8 \
  && rm -rf /var/lib/apt/lists/*

# Non-root user and workdir
RUN groupadd --gid 1000 gam && useradd --uid 1000 --gid 1000 -m gam
WORKDIR /app
USER gam

# ---------- Runtime + GUI target: for Streamlit/3D visualization ----------
FROM base-runtime AS base-runtime-gui
USER root
RUN apt-get update && apt-get install -y --no-install-recommends \
    libgl1-mesa-glx \
    libglib2.0-0 \
  && rm -rf /var/lib/apt/lists/*
USER gam